# -*- coding: utf-8 -*-
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import importlib.util
import subprocess
from PyQt5 import QtCore, QtGui, QtWidgets
from processor.maya_processor import MayaSceneProcessor
from processor.script_processor import ScriptProcessor


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(591, 500)  # Increased initial size
        
        # Main layout (vertical)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        
        # Scene Browser (horizontal layout)
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_1.setObjectName("horizontalLayout_1")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_1.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_1.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_1)
        
        # Scene List
        self.label = QtWidgets.QLabel(Form)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)
        
        # Script Browser (horizontal layout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.scriptPathEdit = QtWidgets.QLineEdit(Form)
        self.scriptPathEdit.setObjectName("scriptPathEdit")
        self.scriptPathEdit.setText("/home/didi/Documents/ScriptPY/Monsta/Maya/headless/gui_dev/scripts")
        self.horizontalLayout_2.addWidget(self.scriptPathEdit)
        self.scriptBrowseButton = QtWidgets.QPushButton(Form)
        self.scriptBrowseButton.setObjectName("scriptBrowseButton")
        self.horizontalLayout_2.addWidget(self.scriptBrowseButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        
        # Script List
        self.scriptList = QtWidgets.QListWidget(Form)
        self.scriptList.setObjectName("scriptList")
        self.scriptList.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)  # Enable multi-select
        self.verticalLayout.addWidget(self.scriptList)

        # MayaPy Path (horizontal layout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.mayapyPathEdit = QtWidgets.QLineEdit(Form)
        self.mayapyPathEdit.setObjectName("mayapyPathEdit")
        self.mayapyPathEdit.setPlaceholderText("Path to mayapy.exe (e.g., C:\\Program Files\\Autodesk\\Maya2023\\bin\\mayapy.exe)")
        self.horizontalLayout_4.addWidget(self.mayapyPathEdit)
        self.mayapyBrowseButton = QtWidgets.QPushButton(Form)
        self.mayapyBrowseButton.setObjectName("mayapyBrowseButton")
        self.horizontalLayout_4.addWidget(self.mayapyBrowseButton)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        
        # Process Button (centered)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.processButton = QtWidgets.QPushButton(Form)
        self.processButton.setObjectName("processButton")
        self.horizontalLayout_3.addWidget(self.processButton)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        
        # Set stretch factors (makes text areas expand)
        self.verticalLayout.setStretch(2, 1)  # textEdit
        self.verticalLayout.setStretch(4, 1)  # scriptList
        
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Maya Scene Processor"))
        self.pushButton.setText(_translate("Form", "&Browse Folder"))
        self.processButton.setText(_translate("Form", "&Process Scenes"))
        self.textEdit.setPlaceholderText(_translate("Form", "Sh01 ... Sh02 .. Sh03 .."))
        self.scriptBrowseButton.setText(_translate("Form", "Browse Scripts"))
        self.mayapyBrowseButton.setText(_translate("Form", "Browse mayapy.exe"))
        self.label.setText(_translate("Form", "List of scenes"))

class MayaProcessorApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        self.processor = None
        self.scene_files = []

        self.ui.textEdit.setSizePolicy(
        QtWidgets.QSizePolicy.Expanding,
        QtWidgets.QSizePolicy.Expanding
        )
        self.ui.scriptList.setSizePolicy(
            QtWidgets.QSizePolicy.Expanding,
            QtWidgets.QSizePolicy.Expanding
        )
        
        # Connect signals
        self.ui.pushButton.clicked.connect(self.browse_folder)
        self.ui.processButton.clicked.connect(self.process_scenes)
        self.ui.scriptBrowseButton.clicked.connect(self.browse_scripts)
        self.ui.mayapyBrowseButton.clicked.connect(self.browse_mayapy)
        self.load_scripts(self.ui.scriptPathEdit.text())
        self.set_default_mayapy_path()
    
    def set_default_mayapy_path(self):
        """Try to find mayapy.exe in common locations"""
        common_paths = [
            r"C:\Program Files\Autodesk\Maya2023\bin\mayapy.exe",
            r"C:\Program Files\Autodesk\Maya2022\bin\mayapy.exe",
        ]
        
        for path in common_paths:
            if os.path.exists(path):
                self.ui.mayapyPathEdit.setText(path)
                break
        
    def browse_folder(self):
        """Browse for folder containing Maya scenes"""
        folder_path = QtWidgets.QFileDialog.getExistingDirectory(
            self,
            "Select Folder Containing Maya Scenes",
            "",
            QtWidgets.QFileDialog.ShowDirsOnly
        )
        
        if folder_path:
            self.ui.lineEdit.setText(folder_path)
            self.find_maya_scenes(folder_path)
    
    def browse_scripts(self):
        """Browse for script directory"""
        folder_path = QtWidgets.QFileDialog.getExistingDirectory(
            self,
            "Select Scripts Folder",
            self.ui.scriptPathEdit.text(),  # Start at current path
            QtWidgets.QFileDialog.ShowDirsOnly
        )
        
        if folder_path:
            self.ui.scriptPathEdit.setText(folder_path)
            self.load_scripts(folder_path)
    
    def browse_mayapy(self):
        """Browse for mayapy.exe"""
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            "Locate mayapy.exe",
            self.ui.mayapyPathEdit.text() or "C:\\",
            "Executable Files (*.exe)"
        )
        
        if file_path:
            self.ui.mayapyPathEdit.setText(file_path)

    def load_scripts(self, folder_path):
        """Load Python scripts from specified folder"""
        self.ui.scriptList.clear()
        
        try:
            if os.path.exists(folder_path):
                for file in os.listdir(folder_path):
                    if file.endswith('.py') and not file.startswith('_'):
                        item = QtWidgets.QListWidgetItem(file)
                        item.setData(QtCore.Qt.UserRole, os.path.join(folder_path, file))
                        self.ui.scriptList.addItem(item)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Could not load scripts: {str(e)}")
            
    def find_maya_scenes(self, folder_path):
        self.ui.textEdit.clear()
        self.scene_files = []
        
        try:
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.endswith(('.ma', '.mb')):
                        full_path = os.path.join(root, file)
                        self.scene_files.append(full_path)
                        
                        # Create shortened display path
                        path_parts = full_path.split(os.sep)
                        if len(path_parts) > 4:
                            short_path = f".../{os.sep.join(path_parts[-3:])}"
                        else:
                            short_path = full_path
                        
                        # Create clickable label with tooltip
                        label = QtWidgets.QLabel(short_path)
                        label.setToolTip(full_path)  # Show full path on hover
                        label.setStyleSheet("QLabel { padding: 2px; }")
                        label.setCursor(QtCore.Qt.PointingHandCursor)
                        
                        # Add to text edit (using HTML for better formatting)
                        self.ui.textEdit.append(f"<div style='margin-bottom: 5px;'>{short_path}</div>")
            
            if not self.scene_files:
                QtWidgets.QMessageBox.warning(self, "Warning", "No Maya scenes found")
            else:
                self.processor = MayaSceneProcessor(self.scene_files)
                
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Directory error: {str(e)}")
            
    def process_scenes(self):
        """Process all found scenes with selected scripts"""
        if not self.scene_files:
            QtWidgets.QMessageBox.warning(self, "Warning", "No scenes selected")
            return
            
        selected_scripts = self.ui.scriptList.selectedItems()
        if not selected_scripts:
            QtWidgets.QMessageBox.warning(self, "Warning", "No scripts selected")
            return
        
        mayapy_path = self.ui.mayapyPathEdit.text()
        if not mayapy_path or not os.path.exists(mayapy_path):
            QtWidgets.QMessageBox.critical(self, "Error", "Invalid mayapy.exe path")
            return
        
        results = []
        for script_item in selected_scripts:
            script_path = script_item.data(QtCore.Qt.UserRole)
            try:
                # Run the script with mayapy.exe
                cmd = [mayapy_path, script_path] + self.scene_files
                result = subprocess.run(
                    cmd,
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                output = result.stdout
                if result.stderr:
                    output += f"\nERRORS:\n{result.stderr}"
                
                results.append(f"=== Results from {script_item.text()} ===")
                results.append(output)
                
            except subprocess.CalledProcessError as e:
                results.append(f"Error executing {script_item.text()}:\n{e.stderr}")
            except Exception as e:
                results.append(f"Error executing {script_item.text()}: {str(e)}")
        
        self.ui.textEdit.clear()
        self.ui.textEdit.append("\n\n".join(results))
        QtWidgets.QMessageBox.information(self, "Complete", "Finished processing scenes")


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MayaProcessorApp()
    window.show()
    sys.exit(app.exec_())